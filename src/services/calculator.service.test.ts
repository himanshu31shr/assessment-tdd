/* eslint-disable jest/no-conditional-expect */
import { CalculatorService } from "./calculator.service";

type InputData = Array<Array<string | number>>;

const inputs: InputData = [
  ["1,2,3,4,5", 1 + 2 + 3 + 4 + 5],
  ["1, 3, 4,5, , 5", 1 + 3 + 4 + 5 + 5],
  ["1,5", 1 + 5],
  ["1,,    2,,,,ddff,10", 1 + 2 + 10],
  ["1,,\n5,5,   \n 30,   2,,,,ddff,10", 1 + 5 + 5 + 30 + 2 + 10],
  [
    `1\n5\n5\n30,   2,,,,ddff,10
10

10
   \n2\n3
20`,
    1 + 5 + 5 + 30 + 2 + 10 + 10 + 10 + 2 + 3 + 20,
  ],
  [


  ],
  [
    `//|
3|4|5,5,7 \n 10
10`,
    3 + 4 + 5 + 5 + 7 + 10 + 10,
  ],
  [
    `//;\n1;2
\n100\n3;5`,
    1 + 2 + 100 + 3 + 5,
  ],
  [
    `\n1;2
\n100\n3;5
//;`,
    100,
  ],
  [`//;\n1;2\n100`, 1 + 2 + 100],
];

const invalidInputs: InputData = [
  ["1,,\n5,5,   \n 30,   -2,,,,ddff,10", "-2"],
  [`1,2,-3,5`, "-3"],
  [
    `1\n-5\n5\n30,   2,,,,ddff,10
10

-10
   \n2\n3
20`,
    "-5, -10",
  ],
  [
    `//|
3|4|-5,-5,-7 \n -10
10`,
    "-5, -5, -7, -10",
  ],
];

describe("Calculator service", () => {
  test("should initialize", () => {
    const input = "";
    expect(new CalculatorService(input)).toBeInstanceOf(CalculatorService);
  });

  test("should return 0 with empty input", () => {
    const input = "";
    const service = new CalculatorService(input);
    expect(service.calculate()).toEqual(0n);
  });

  test("should throw exception with invalid delimiter", () => {
    try {
      const service = new CalculatorService(`//3
    asd`);
      service.findAdditionalDelimiter();
      service.calculate();
    } catch (err) {
      expect(err).toBeInstanceOf(Error);
      if (err instanceof Error) {
        expect(err.message).toBe(
          "Custom delimiter definition discard: Delimiters cannot be numbers!"
        );
      }
    }
  });

  describe("valid cases of calculation", () => {
    for (let arr of inputs) {
      test("should return sum with comma seperated numbers " + arr[0], () => {
        const service = new CalculatorService(arr[0] as string);
        service.findAdditionalDelimiter();
        expect(service.calculate()).toEqual(BigInt(arr[1]));
      });
    }
  });

  describe("invalid cases of calculation", () => {
    for (let arr of inputs) {
      test("should throw exception with negative numbers " + arr[0], () => {
        try {
          const service = new CalculatorService();
          service.findAdditionalDelimiter();
          service.calculate();
        } catch (err) {
          expect(err).toBeInstanceOf(Error);
          if (err instanceof Error) {
            expect(err.message).toBe(
              `Input string has (${arr[1]}) negative numbers!`
            );
          }
        }
      });
    }
  });
});
