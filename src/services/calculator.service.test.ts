import { CalculatorService } from "./calculator.service";

type InputData = Array<Array<string | number>>;

const inputs: InputData = [
  ["1,2,3,4,5", 1 + 2 + 3 + 4 + 5],
  ["1, 3, 4,5, , 5", 1 + 3 + 4 + 5 + 5],
  ["1,5", 1 + 5],
  ["1,,    2,,,,ddff,10", 1 + 2 + 10],
  ["1,,\n5,5,   \n 30,   2,,,,ddff,10", 1 + 5 + 5 + 30 + 2 + 10],
  [
    `1\n5\n5\n30,   2,,,,ddff,10
10

10
   \n2\n3
20`,
    1 + 5 + 5 + 30 + 2 + 10 + 10 + 10 + 2 + 3 + 20,
  ],
  [

    "42342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423442342342423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424234423423424237",
  ],
];

describe("Calculator service", () => {
  test("should initialize", () => {
    const input = "";
    expect(new CalculatorService(input)).toBeInstanceOf(CalculatorService);
  });

  test("should return 0 with empty input", () => {
    const input = "";
    const service = new CalculatorService(input);
    expect(service.calculate()).toEqual(0n);
  });

  for (let arr of inputs) {
    test("should return sum with comma seperated numbers " + arr[0], () => {
      const service = new CalculatorService(arr[0] as string);
      expect(service.calculate()).toEqual(BigInt(arr[1]));
    });
  }
});
